/* Singly Linked List */
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>   // malloc, free
#include <process.h>  // exit()

struct node {
    int label;
    struct node *next;
};

void main() {
    int ch, fou, k;
    struct node *h, *temp, *head, *h1;

    /* Head node construction (dummy node) */
    head = (struct node*) malloc(sizeof(struct node));
    head->label = -1;
    head->next = NULL;

    while (1) {
        clrscr();
        printf("\n\n SINGLY LINKED LIST OPERATIONS\n");
        printf("1->Add ");
        printf("2->Delete ");
        printf("3->View ");
        printf("4->Exit\n");
        printf("Enter your choice : ");
        scanf("%d", &ch);

        switch(ch) {
            /* Add a node */
            case 1:
                printf("\n Enter label after which to add : ");
                scanf("%d", &k);

                h = head;
                fou = 0;

                while (h != NULL) {
                    if (h->label == k) {
                        fou = 1;
                        break;
                    }
                    h = h->next;
                }

                if (fou != 1)
                    printf("Node not found\n");
                else {
                    temp = (struct node*) malloc(sizeof(struct node));
                    printf("Enter label for new node : ");
                    scanf("%d", &temp->label);
                    temp->next = h->next;
                    h->next = temp;
                    printf("Node added successfully\n");
                }
                getch();
                break;

            /* Delete a node */
            case 2:
                printf("Enter label of node to be deleted: ");
                scanf("%d", &k);

                fou = 0;
                h = h1 = head;

                while (h->next != NULL) {
                    h = h->next;
                    if (h->label == k) {
                        fou = 1;
                        break;
                    }
                }

                if (fou == 0)
                    printf("Sorry, Node not found\n");
                else {
                    while (h1->next != h)
                        h1 = h1->next;
                    h1->next = h->next;
                    free(h);
                    printf("Node deleted successfully\n");
                }
                getch();
                break;

            /* View list */
            case 3:
                printf("\n\n HEAD -> ");
                h = head;
                while (h->next != NULL) {
                    h = h->next;
                    printf("%d -> ", h->label);
                }
                printf("NULL");
                getch();
                break;

            /* Exit */
            case 4:
                exit(0);

            default:
                printf("Invalid choice!\n");
                getch();
        }
    }
}
